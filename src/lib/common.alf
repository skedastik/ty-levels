{% macro goody(x, z, y, grenades, missiles, power, shield, lives, boostTime, cooldown, shape, color, colorTrim, angle, speed, sound, yon, out) %}
    <unique vars="mShow" />
    {% if out is not defined %}
        <unique vars="mTaken" />
        {% set takenMsg = 'mTaken' %}
    {% else %}
        {% set takenMsg = out %}
    {% endif %}
    <And in="@start" out="mShow" />
    <Timer wait="{{ toTicks(cooldown) }}" in="{{ takenMsg }}" out="mShow" />
    <Goody
        {% if shape is defined %}
        shape="{{ shape }}"
        {% endif %}

        {% if grenades is defined  %}
        grenades="{{ grenades }}"
        {% endif %}

        {% if missiles is defined  %}
        missiles="{{ missiles }}"
        {% endif %}

        {% if power is defined  %}
        power="{{ power }}"
        {% endif %}

        {% if shield is defined  %}
        shield="{{ shield }}"
        {% endif %}

        {% if lives is defined  %}
        lives="{{ lives }}"
        {% endif %}

        {% if boostTime is defined  %}
        boostTime="{{ boostTime }}"
        {% endif %}

        {% if color is defined  %}
        color="{{ color }}"
        {% endif %}

        {% if colorTrim is defined  %}
        color.1="{{ colorTrim }}"
        {% endif %}

        {% if x is defined  %}
        cx="{{ x }}"
        {% endif %}

        {% if z is defined  %}
        cz="{{ z }}"
        {% endif %}

        {% if y is defined  %}
        y="{{ y + PLAYER_RIDE_HEIGHT }}"
        {% endif %}

        {% if angle is defined  %}
        angle="{{ angle }}"
        {% endif %}

        {% if yon is defined %}
        yon="{{ yon }}"
        {% endif %}

        {% if sound is defined %}
        sound="{{ sound }}"
        {% endif %}

        {% if speed is defined %}
        speed="{{ speed }}"
        {% endif %}

        start="mShow"
        out="{{ takenMsg }}"
    />
{% endmacro %}

{# By default the bubble teleporter has an active zone 20 meters thick beyond
the passed radius. This is to facilitate level logic that might require players
to be teleported or spawned outside the bubble. To override that behavior, pass
r2 to define the active radius. #}
{% macro bubbleTeleporter(r, r2=None, x=0, z=0, y=None, destGroup=None, spin=True, start=None) %}
    {% if r2 is not none and r2 <= r %}
        {{ throw('r2 must be greater than r') }}
    {% endif %}

    {# Shift the bubble tele below ground to avoid interaction w/ players. #}
    {% set dy = 10 %}
    {# Calculate shifted bubble radius r' so r is preserved. #}
    {% set rp = adjustedRadius(math.sqrt(r*r + dy*dy)) %}
    {% set y_max = rp - dy %}
    {% set rp2 = adjustedRadius(math.sqrt((r+20)*(r+20) + dy*dy)) if r2 is none else adjustedRadius(math.sqrt(r2*r2 + dy*dy)) %}

    {% if destGroup is none %}
        {% if y is none %}
            {{ throw('You must pass `y` if no `destGroup` is specified.') }}
        {% endif %}

        {% set destGroup = 'uBubbleTele' %}

        {% if y > y_max %}
            {{ throw('`y` is above bubble radius. Given passed `r`, y_max = ' + str(round(y_max * 100) / 100) + ').') }}
        {% endif %}

        <unique vars="{{ destGroup }}" />
        <Teleporter cx="{{ x }}" cz="{{ z }}" y="{{ y }}" shape="0" group="{{ destGroup }}" {{ 'spin="false"' if not spin }} mask="0" />
    {% endif %}

    <Teleporter
        cx="{{ x }}" cz="{{ z }}" y="{{ -dy }}" shape="0" deadRange="{{ rp }}" activeRange="{{ rp2 }}" destGroup="{{ destGroup }}"
        {% if start is not none %}
            start="{{ start }}"
        {% endif %}
    />
{% endmacro %}

{# A group of team-specific incarnators. The first player spawned in each group
faces the specified angle with remaining players arranged radially outward. You
may pass a spawn message which will be triggered once for each player that
spawns. This message is sent 1 tick after the start of the game. #}
{% macro teamIncarnGroup(x, z, y, angle, team, spawnMessage, stop, r=None, players=8) %}
    {% if r is none %}
        {% set r = 3 %}
    {% endif %}

    {% set r_min = 1.5 %}
    {% if r < r_min %}
        {{ throw('Minimum walker group radius is ' + str(r_min) + '.') }}
    {% endif %}

    {% if players < 1 or players > 8 %}
        {{ throw('players must be in range [1,8] inclusive.')}}
    {% endif %}

    {% set a1 = angle - 90 %}
    {% set a2 = angle + 90 %}
    {% set a3 = angle %}
    {% set a4 = angle + 180 %}
    {% set a5 = angle - 45 %}
    {% set a6 = angle + 45 %}
    {% set a7 = angle - 135 %}
    {% set a8 = angle + 135 %}
    {% set dx1 = r * round(math.sin(math.radians(a1)), 3) %}
    {% set dz1 = r * -round(math.cos(math.radians(a1)), 3) %}
    {% set dx2 = r * round(math.sin(math.radians(a2)), 3) %}
    {% set dz2 = r * -round(math.cos(math.radians(a2)), 3) %}
    {% set dx3 = r * round(math.sin(math.radians(a3)), 3) %}
    {% set dz3 = r * -round(math.cos(math.radians(a3)), 3) %}
    {% set dx4 = r * round(math.sin(math.radians(a4)), 3) %}
    {% set dz4 = r * -round(math.cos(math.radians(a4)), 3) %}
    {% set dx5 = r * round(math.sin(math.radians(a5)), 3) %}
    {% set dz5 = r * -round(math.cos(math.radians(a5)), 3) %}
    {% set dx6 = r * round(math.sin(math.radians(a6)), 3) %}
    {% set dz6 = r * -round(math.cos(math.radians(a6)), 3) %}
    {% set dx7 = r * round(math.sin(math.radians(a7)), 3) %}
    {% set dz7 = r * -round(math.cos(math.radians(a7)), 3) %}
    {% set dx8 = r * round(math.sin(math.radians(a8)), 3) %}
    {% set dz8 = r * -round(math.cos(math.radians(a8)), 3) %}
    
    {% set cxs = [x-dx3, x-dx1, x-dx2, x-dx5, x-dx6, x-dx7, x-dx8, x-dx4] %}
    {% set czs = [z-dz3, z-dz1, z-dz2, z-dz5, z-dz6, z-dz7, z-dz8, z-dz4] %}
    {% set angles = [angle, angle-90, angle+90, angle-45, angle+45, angle-135, angle+135, angle+180] %}

    <unique vars="mStartDetectingSpawn mStopDetectingSpawn" />
    <Timer wait="1" in="@start" out="mStartDetectingSpawn" />
    <Timer wait="2" in="@start" out="mStopDetectingSpawn" />
    
    {% for i in range(0, players) %}
        <Incarnator
            cx="{{ cxs[i] }}" cz="{{ czs[i] }}" y="{{ y }}" angle="{{ angles[i] }}"
            mask="T{{ team }}"
            {% if stop is defined %}
                stop="{{ stop }}"
            {% endif %}
        />
        {% if spawnMessage is defined %}
            <Goody
                cx="{{ cxs[i] }}" cz="{{ czs[i] }}" y="{{ y + PLAYER_RIDE_HEIGHT }}" sound="0" shape="bspAvaraA"
                {% if DEBUG %}
                    color="#f00"
                {% else %}
                    color="rgba(0, 0, 0, 0%)" yon="0.001"
                {% endif %}
                out="{{ spawnMessage }}" start="mStartDetectingSpawn" stop="mStopDetectingSpawn"
            />
        {% endif %}
    {% endfor %}

{% endmacro %}

{# useful for placing structural markers while editing levels #}
{% macro ref(x, z, y, w, d, h, color="cRef") %}
    <Field x="{{ x }}" z="{{ z }}" y="{{ y }}" w="{{ w }}" d="{{ d }}" h="{{ h }}" color="{{ color }}" visible="true" />
{% endmacro %}

{# 
Expressive Wall macro supporting wall definitions using both the original Avara
convention and bounding boxes. In addition to x/z/y, pass w/d/h for the the
former or xx/zz/yy for the latter. Mix and match as you please.
#}
{% macro wall(color, x, z, y, w=None, d=None, h=None, xx=None, zz=None, yy=None, etag=None)%}
    <Wall
        {{ _validateDimensionArgs(w, d, h, xx, zz, yy) }}

        {% if xx is none %}
            x="{{ x }}" w="{{ w }}"
        {% else %}
            x="{{ (x + xx) / 2 }}" w="{{ abs(x - xx) }}"
        {% endif %}

        {% if zz is none %}
            z="{{ z }}" d="{{ d }}"
        {% else %}
            z="{{ (z + zz) / 2 }}" d="{{ abs(z - zz) }}"
        {% endif %}

        {% if yy is none %}
            y="{{ y }}" h="{{ h }}"
        {% else %}
            y="{{ min(y, yy) }}" h="{{ abs(y - yy) }}"
        {% endif %}

        color="{{ color }}"

        {% if etag is not none %}
            etag="{{ etag }}"
        {% endif %}
    />
{% endmacro %}

{# 
Expressive Ramp macro supporting definitions using both the original Avara
convention and bounding boxes. In addition to x/z/y, pass w/d/deltaY for the the
former or xx/zz/yy for the latter. Mix and match as you please.

The `h` param is now called `thick`.

Ramps slope down in the direction of `angle` assuming positive `deltaY`.

These ramps behave slightly differently from Avara's original in that the top of
the ramp is seamless regardless of ramp thickness. That is, there will be no
visible gap or seam between the ramp and its defined bounds.
#}
{% macro ramp(color, x, z, y, thick, angle, w=None, d=None, deltaY=None, xx=None, zz=None, yy=None, etag=None)%}
    {{ _validateDimensionArgs(w, d, deltaY, xx, zz, yy, isWall=False) }}

    {% if xx is none %}
        {% set wf =  w %}
        {% set xf =  x %}
    {% else %}
        {% set wf = abs(x - xx) %}
        {% set xf = (x + xx) / 2 %}
    {% endif %}

    {% if zz is none %}
        {% set df = d %}
        {% set zf = z %}
    {% else %}
        {% set df = abs(z - zz) %}
        {% set zf = (z + zz) / 2 %}
    {% endif %}

    {% if yy is none %}
        {% set yf = y %}
        {% set dyf = deltaY %}
    {% else %}
        {% set yf = min(y, yy) %}
        {% set dyf = abs(y - yy) %}
    {% endif %}

    {# support arbitrarily large ramps by decimating them just like Avara decimates walls #}
    {% if wf > MAX_WALL_SIZE %}
        {% if angle == 90 %}
            {{ ramp(color, xf-wf/4, zf,      yf+dyf/2, thick, angle, wf/2, df,   dyf/2, etag=etag) }}
            {{ ramp(color, xf+wf/4, zf,      yf,       thick, angle, wf/2, df,   dyf/2, etag=etag) }}
        {% elif angle == 270 %}
            {{ ramp(color, xf-wf/4, zf,      yf,       thick, angle, wf/2, df,   dyf/2, etag=etag) }}
            {{ ramp(color, xf+wf/4, zf,      yf+dyf/2, thick, angle, wf/2, df,   dyf/2, etag=etag) }}
        {% else %}
            {{ ramp(color, xf-wf/4, zf,      yf,       thick, angle, wf/2, df,   dyf,   etag=etag) }}
            {{ ramp(color, xf+wf/4, zf,      yf,       thick, angle, wf/2, df,   dyf,   etag=etag) }}
        {% endif %}
    {% elif df > MAX_WALL_SIZE %}
        {% if angle == 180 %}
            {{ ramp(color, xf,      zf-df/4, yf+dyf/2, thick, angle, wf,   df/2, dyf/2, etag=etag) }}
            {{ ramp(color, xf,      zf+df/4, yf,       thick, angle, wf,   df/2, dyf/2, etag=etag) }}
        {% elif angle == 0 %}
            {{ ramp(color, xf,      zf-df/4, yf,       thick, angle, wf,   df/2, dyf/2, etag=etag) }}
            {{ ramp(color, xf,      zf+df/4, yf+dyf/2, thick, angle, wf,   df/2, dyf/2, etag=etag) }}
        {% else %}
            {{ ramp(color, xf,      zf-df/4, yf,       thick, angle, wf,   df/2, dyf,   etag=etag) }}
            {{ ramp(color, xf,      zf+df/4, yf,       thick, angle, wf,   df/2, dyf,   etag=etag) }}
        {% endif %}
    {% else %} {# ramp is not too large so go ahead and instantiate it #}
        
        {# make the ramp seamless #}
        {% if angle == 90 or angle == 270 %}
            {% set beta = math.pi/2 - math.atan(wf/dyf) %}
            {% set deltax = thick * math.sin(beta) %}
            {% set wf = wf + deltax %}
            {% if angle == 90 %}
                {% set xf = xf - deltax/2 %}
            {% else %}
                {% set xf = xf + deltax/2 %}
            {% endif %}
        {% else %}
            {% set beta = math.pi/2 - math.atan(df/dyf) %}
            {% set deltaz = thick * math.sin(beta) %}
            {% set df = df + deltaz %}
            {% if angle == 180 %}
                {% set zf = zf - deltaz/2 %}
            {% else %}
                {% set zf = zf + deltaz/2 %}
            {% endif %}
        {% endif %}
        {% set deltay = thick * math.cos(beta) %}
        {% set yf = yf - deltay %}
        {% set dyf = dyf + deltay %}

        <Ramp
            x="{{ xf }}" z="{{ zf }}" y="{{ yf }}"
            w="{{ wf }}" d="{{ df }}" h="{{ thick }}"
            deltaY="{{ dyf }}" angle="{{ angle }}"
            color="{{ color }}"
            {% if etag is not none %}
                etag="{{ etag }}"
            {% endif %}
        />
    {% endif %}
{% endmacro %}

{% macro goody(x, z, y, grenades, missiles, power, shield, lives, boostTime, cooldown, shape, color, colorTrim, angle, speed, sound, yon, out) %}
    <unique vars="mShow" />
    {% if out is not defined %}
        <unique vars="mTaken" />
        {% set takenMsg = 'mTaken' %}
    {% else %}
        {% set takenMsg = out %}
    {% endif %}
    <And in="@start" out="mShow" />
    <Timer wait="{{ toTicks(cooldown) }}" in="{{ takenMsg }}" out="mShow" />
    <Goody
        {% if shape is defined %}
        shape="{{ shape }}"
        {% endif %}

        {% if grenades is defined  %}
        grenades="{{ grenades }}"
        {% endif %}

        {% if missiles is defined  %}
        missiles="{{ missiles }}"
        {% endif %}

        {% if power is defined  %}
        power="{{ power }}"
        {% endif %}

        {% if shield is defined  %}
        shield="{{ shield }}"
        {% endif %}

        {% if lives is defined  %}
        lives="{{ lives }}"
        {% endif %}

        {% if boostTime is defined  %}
        boostTime="{{ boostTime }}"
        {% endif %}

        {% if color is defined  %}
        color="{{ color }}"
        {% endif %}

        {% if colorTrim is defined  %}
        color.1="{{ colorTrim }}"
        {% endif %}

        {% if x is defined  %}
        cx="{{ x }}"
        {% endif %}

        {% if z is defined  %}
        cz="{{ z }}"
        {% endif %}

        {% if y is defined  %}
        y="{{ y + PLAYER_RIDE_HEIGHT }}"
        {% endif %}

        {% if angle is defined  %}
        angle="{{ angle }}"
        {% endif %}

        {% if yon is defined %}
        yon="{{ yon }}"
        {% endif %}

        {% if sound is defined %}
        sound="{{ sound }}"
        {% endif %}

        {% if speed is defined %}
        speed="{{ speed }}"
        {% endif %}

        start="mShow"
        out="{{ takenMsg }}"
    />
{% endmacro %}

{# ------------------------- internal macros below -------------------------- #}

{% macro _validateDimensionArgs(w=None, d=None, h=None, xx=None, zz=None, yy=None, isWall=True) %}
    {% if xx is none and w is none %}
        {{ throw('Either `xx` or `w` expected. Neither were passed.') }}
    {% elif xx is not none and w is not none %}
        {{ throw('Both `xx` and `w` were passed. Only one or the other is allowed.') }}
    {% endif %}
    {% if zz is none and d is none %}
        {{ throw('Either `zz` or `d` expected. Neither were passed.') }}
    {% elif zz is not none and d is not none %}
        {{ throw('Both `zz` and `d` were passed. Only one or the other is allowed.') }}
    {% endif %}
    {% if yy is none and h is none %}
        {{ throw('Either `yy` or '+('`h`' if isWall else '`deltaY`')+' expected. Neither were passed.') }}
    {% elif yy is not none and h is not none %}
        {{ throw('Both `yy` and '+('`h`' if isWall else '`deltaY`')+' were passed. Only one or the other is allowed.') }}
    {% endif %}
{% endmacro %}

#!/usr/bin/env bash

# Watch for changes and automatically run `make`. This requires `fswatch` to be
# installed.
#
# Pass -l to enable live reloading.

opts=$*

background_pids=()

add_background_pid() {
    background_pids+=("$1")
}

kill_background_processes() {
    echo "Cleaning up..."
    for pid in "${background_pids[@]}"; do
      kill "$pid" 2>/dev/null
    done
}

trap kill_background_processes EXIT

while getopts ":l" opt
do
    case $opt in
    (l) live_reload=1 ;;
    esac
done

# In order to make live reload more responsive to user actions (i.e. saving
# source files), immediately stop any previously spawned processes and trigger
# another live reload.
cancel_and_run() {
    while read; do
        # kill any previously spawned subprocesses
        if [ ${command_pid:-0} -gt 0 ]; then
            while pkill -P $command_pid 2>/dev/null; do sleep 0.05; done
        fi
        # build and reload
        { \
            make OPTS="${opts}" && \
            echo 'Requesting reload from Avara...' && \
            python live_reload.py && \
            echo 'Reload request acknowledged.'
        } &
        local command_pid=$!
    done
}

if  [[ live_reload -eq 1 ]]; then
    echo 'Watching for changes to source files (live reload features enabled)...'
    python dispatcher.py &
    add_background_pid $!
    fswatch -o --no-defer -l 0.1 src alf_globals.py | cancel_and_run
else
    echo 'Watching for changes to source files...'
    fswatch -o -0 --no-defer -l 0.1 src alf_globals.py | xargs -0 -n1 sh -c "make OPTS='${opts}'"
fi
